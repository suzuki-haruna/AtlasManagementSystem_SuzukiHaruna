suzuki@jp/00000000
kakashi@jp/00000000(先)
sato@jp/00000000
taka@jp/00000000
ayu@jp/00000000
psycho@jp/00000000(先)

3=sex・subjectsのカラム

コントローラー側でデータを受け取る/配列を検索できるメソッド/search

★

1つの投稿に複数のカテゴリーがあり、1つのカテゴリーに複数の投稿があります。
→1つの投稿にカテゴリーは一つしかない!?(カテゴリーとサブカテゴリーという意味では二つある)

Model
親にhasMany、子にbelongsToを使います。
→？

<!-- いいね -->
          <div>
            @if(Auth::user()->is_Like($post->id)) <!-- もし(ログインユーザー()->is_Like(post->id)) -- User.phpにis_Likeメソッドあり -->
            <p class="m-0"><i class="fas fa-heart un_like_btn" post_id="{{ $post->id }}"></i><span class="like_counts{{ $post->id }}"></span></p>
            <!-- この投稿を「いいね」していないとき -->
            @else
            <p class="m-0"><i class="fas fa-heart like_btn" post_id="{{ $post->id }}"></i><span class="like_counts{{ $post->id }}"></span></p>
            @endif
            <button class="like_btn" post_id="{{ $post->id }}">いいね</button>
            <span class="like_counts like_counts{{ $post->id }}" post_id="{{ $post->id }}">{{ $post->like_counts }}</span>
            <span class="like_counts{{ $post->id }}">{{ $post->like_counts }}</span>
            <span>{{ $post->like_counts }}</span>
          </div>

<li class="" category_id="{{ $sub_category->id }}">
          <a href="{{ route('post.show', ['category_word' => $sub_category->id]) }}">{{ $sub_category->sub_category }}</a>

<input type="submit" name="category_word" class="category_btn" value="{{ $sub_category->id }}" form="postSearchRequest">
          <span>{{ $sub_category->sub_category }}</span></li><!--CSSてきとーとりあえずで-->

<li>
          <input type="submit" name="category_word" class="category_btn" value="{{ $sub_category->id }}" form="postSearchRequest">
          </li>


<details class="accordion-003">
    <summary>アコーディオンのデザイン</summary>
    <p>下線だけのシンプルなアコーディオンメニュー。クセがなくどんなサイトでも使いやすいのが特徴です。</p>
</details>
<details class="accordion-003">
    <summary>アコーディオンのデザイン</summary>
    <p>下線だけのシンプルなアコーディオンメニュー。クセがなくどんなサイトでも使いやすいのが特徴です。</p>
</details>

.accordion-003 {
    max-width: 500px;
    margin-bottom: 7px;
    border-bottom: 2px solid #d0d0d0;
}

.accordion-003 summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    padding: 1em 2em;
    color: #333333;
    font-weight: 600;
    cursor: pointer;
}

.accordion-003 summary::-webkit-details-marker {
    display: none;
}

.accordion-003 summary::after {
    transform: translateY(-25%) rotate(45deg);
    width: 7px;
    height: 7px;
    margin-left: 10px;
    border-bottom: 3px solid #333333b3;
    border-right: 3px solid #333333b3;
    content: '';
    transition: transform .3s;
}

.accordion-003[open] summary::after {
    transform: rotate(225deg);
}

.accordion-003 p {
    transform: translateY(-10px);
    opacity: 0;
    margin: 0;
    padding: .3em 2em 1.5em;
    color: #333333;
    transition: transform .5s, opacity .5s;
}

.accordion-003[open] p {
    transform: none;
    opacity: 1;
}
